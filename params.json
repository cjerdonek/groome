{"name":"Groome","body":"Groome\r\n======\r\n\r\n![](http://github.com/cjerdonek/groome/raw/master/images/mustache-groom.png\r\n\"grooming a mustache\")\r\n\r\n[Groome](http://cjerdonek.github.com/groome/) is a dead-simple,\r\n[Mustache](http://mustache.github.com/)-based standard for language-agnostic\r\ndirectory templates (i.e. templates for directories of files and\r\nsubdirectories).\r\n\r\nProject templates are the main use case.  You can use Groome templates to--\r\n\r\n* decrease the amount of repetition when starting new projects, and\r\n* promote project structure best practices.\r\n\r\nFor example, a Groome template can include initial boilerplate like a README,\r\ncopyright notices, license info, a `.gitignore`, logging configuration,\r\na test harness, the directory hierarchy, packaging info, etc. -- all\r\nwhile customizing the boilerplate with things like the project name,\r\nauthor, year, etc.\r\n\r\nWe encourage you to share your best-practice project structures with others\r\nas Groome templates.\r\n\r\nComments and suggestions on Groome are welcome on the project's GitHub\r\n[issues page](https://github.com/cjerdonek/groome/issues).\r\n\r\n\r\nWhat\r\n----\r\n\r\nA Groome template is just a directory of files (and subdirectories) containing\r\nthe directory structure, an optional directory of Mustache partials, and\r\nan optional directory of lambda shell scripts.\r\n\r\nA Groome implementation renders a Groome template by treating both the name\r\nand contents of each file in the directory structure as a Mustache template.\r\nA single [yaml](http://yaml.org/) or [json](http://www.json.org/)\r\nconfiguration file provides the context used to render each Mustache\r\ntemplate (together with any lambdas).\r\n\r\n\r\nEasy Example\r\n------------\r\n\r\nHere is a \"hello world\" example.  The Groome template--\r\n\r\n    structure/\r\n        {{project}}.sh.mustache\r\n            echo \"{{project}}, world\"\r\n\r\nwith context--\r\n\r\n    { \"project\": \"hello\" }\r\n\r\nyields--\r\n\r\n    output/\r\n        hello.sh\r\n            echo \"hello, world\"\r\n\r\nThis example can be found in the\r\n[tests/example_easy](https://github.com/cjerdonek/groome/tree/master/tests/example_easy)\r\ndirectory of this repository.\r\n\r\n\r\nAdvanced Example\r\n----------------\r\n\r\nHere is an \"advanced\" example that illustrates all of the following:\r\na partial, a lambda-valued variable, and a lambda-valued section.\r\n\r\nAgain, lambdas and partials are both optional.\r\n\r\n    lambdas/\r\n        now.sh\r\n            #!/bin/bash\r\n            # The -n suppresses the trailing newline.\r\n            echo -n $(date)\r\n        hash_comment.sh\r\n            #!/bin/bash\r\n            while read line; do echo \"# $line\"; done\r\n    partials/\r\n        copyright.mustache\r\n            Copyright (C) {{year}} {{author}}.\r\n    structure/\r\n        {{project}}.sh.mustache\r\n            #!/bin/bash\r\n            {{#hash_comment}}\r\n            Project auto-generated at: {{now}}\r\n            {{>copyright}}\r\n            {{/hash_comment}}\r\n            echo \"Running {{project}}...\"\r\n\r\nWith context--\r\n\r\n    {\r\n        \"project\": \"awesomeness\",\r\n        \"author\": \"Mustachioed Maven\",\r\n        \"year\": 2012\r\n    }\r\n\r\nthe template above yields (for example)--\r\n\r\n    output/\r\n        awesomeness.sh\r\n            #!/bin/bash\r\n            # Project auto-generated at: Sun May 27 11:24:21 PDT 2012\r\n            # Copyright (C) 2012 Mustachioed Maven.\r\n            echo \"Running awesomeness...\"\r\n\r\nThe [tests/example_hard](https://github.com/cjerdonek/groome/tree/master/tests/example_hard)\r\ndirectory contains this example.\r\n\r\n\r\nRules\r\n-----\r\n\r\nThe rules for rendering the structure directory of a Groome template are--\r\n\r\n1.  All file names and directory names are treated as Mustache templates,\r\n    after any pre-processing of the name described below.\r\n2.  If a file name ends in `.mustache`, the trailing `.mustache` is stripped\r\n    from the file name and the file contents treated as a Mustache template.\r\n3.  To leave the contents of a Mustache file alone, end the file name in\r\n    `.skip.mustache`.  For such files, the trailing `.skip.mustache` is\r\n    changed to `.mustache` and the file contents are left unchanged.  This is\r\n    the only exception to the previous rule.\r\n4.  If a file name does not end in `.mustache`, the contents of the file\r\n    are copied as is and not treated as a Mustache template.\r\n5.  Each provided lambda script should be added to the initial rendering\r\n    context, using the script's file name without the extension as the lambda's\r\n    context key.\r\n6.  Lambdas used for sections should be treated as unary.\r\n7.  Input and output should be passed to lambdas as UTF-8 encoded strings\r\n    via `stdin` and `stdout`.\r\n\r\n\r\nTemplates\r\n---------\r\n\r\nIf you make a Groome template for others to download or fork, you can list it\r\non the Groome project [wiki](https://github.com/cjerdonek/groome/wiki).\r\n\r\nTo simplify Groome template distribution, use, and discovery, we suggest that\r\nGroome template projects follow these conventions:\r\n\r\n* Store Groome templates in repositories with names prefixed by `groome-`\r\n  (for example `groome-python-script` for a project template for a Python\r\n  script).\r\n* Name the structure directory `structure`, the partials directory\r\n  `partials`, and the lambda directory `lambdas`.\r\n* For documentation purposes, provide a sample context by providing a\r\n  configuration file named `sample.json` or `sample.yaml`.  The file should\r\n  contain a name-value collection with the sample context as the value of\r\n  the key `context`.  This allows additional metadata to be included in\r\n  the configuration file, without risk of key collisions with context data.\r\n* Rendering the template with the sample context should provide an\r\n  application that is \"runnable\" out of the box (for testing and\r\n  demonstration purposes).\r\n\r\n\r\nImplementations\r\n---------------\r\n\r\nGroome implementations can also be listed on the wiki.\r\n\r\n[Molt](http://cjerdonek.github.com/molt/), a Python implementation, is under\r\nconstruction and should be ready shortly.\r\n\r\nTo assist implementations, this project has a\r\n[`tests` directory](https://github.com/cjerdonek/groome/tree/master/tests).\r\nThis directory contains basic test cases to check isolated aspects\r\nof the rules above.  Implementations can include this project's\r\nGit repository as a [submodule](http://help.github.com/submodules/)\r\nto run these tests as part of a test harness.\r\n\r\nThe test cases in the `tests` directory do not attempt to thoroughly test\r\nthe Mustache implementation underlying a Groome implementation.  For that\r\nwe recommend the [Mustache spec](https://github.com/mustache/spec).\r\n\r\n\r\nAuthor\r\n------\r\n\r\nGroome is authored by [Chris Jerdonek](https://github.com/cjerdonek).  Chris is\r\nalso the current [Pystache](https://github.com/defunkt/pystache) maintainer.\r\n\r\n\r\nCopyright\r\n---------\r\n\r\nCopyright (C) 2012 Chris Jerdonek.  All rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:\r\n\r\n* Redistributions of source code must retain the above copyright notice,\r\n  this list of conditions and the following disclaimer.\r\n* Redistributions in binary form must reproduce the above copyright notice,\r\n  this list of conditions and the following disclaimer in the documentation\r\n  and/or other materials provided with the distribution.\r\n* The names of the copyright holders may not be used to endorse or promote\r\n  products derived from this software without specific prior written\r\n  permission.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\nARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\nPOSSIBILITY OF SUCH DAMAGE.\r\n","tagline":"Language-agnostic project templates using Mustache","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}